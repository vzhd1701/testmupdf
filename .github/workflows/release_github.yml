name: release_github

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Release after build'
        required: true
        default: 'no'
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

env:
  BUILD_PYTHON_VERSION: 3.8
  BUILD_POETRY_VERSION: 1.1.13
  PACKAGE_NAME: testmupdf

jobs:
  build_python:
    runs-on: ubuntu-latest
    env:
      POETRY_VIRTUALENVS_CREATE: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ env.BUILD_PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.BUILD_PYTHON_VERSION }}

      - name: Set up Poetry ${{ env.BUILD_POETRY_VERSION }}
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ env.BUILD_POETRY_VERSION }}

      - name: Export requirements
        run: poetry export --without-hashes -f requirements.txt --output requirements.txt

      - name: Build project for distribution
        run: poetry build

      - name: Save release python requirements
        uses: actions/upload-artifact@v2
        with:
          name: release_dist_reqs
          path: requirements.txt

      - name: Save release python packages
        uses: actions/upload-artifact@v2
        with:
          name: release_dist_python
          path: dist

  release:
    if: github.event_name == 'push' || github.event.inputs.release == 'yes'
    needs: [build_binaries]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get tag version
        run: |
          APP_VERSION=$(sed -n 's/^version = "\([^"]\+\)"$/\1/p' "pyproject.toml")
          echo "TAG_VERSION=v$APP_VERSION" >> $GITHUB_ENV

      - name: Load release python packages
        uses: actions/download-artifact@v2
        with:
          name: release_dist_python
          path: dist

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.TAG_VERSION }}
          draft: true
